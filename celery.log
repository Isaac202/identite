2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente, rg_verso, cnh):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 16:44:17 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente, rg_verso, cnh):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 16:46:56 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64, rg_verso_b64, cnh_b64):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 16:50:14 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64, rg_verso_b64, cnh_b64):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 17:03:36 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64, rg_verso_b64, cnh_b64):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 17:05:48 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64, rg_verso_b64, cnh_b64):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 17:06:50 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64, rg_verso_b64, cnh_b64):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:08:49 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64, rg_verso_b64, cnh_b64):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:11:44 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:18:32 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:21:06 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:23:07 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:23:27 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 18:24:32 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-06-27 19:40:49 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-01 15:33:56 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-05 13:53:33 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-05 14:10:13 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-05 14:12:32 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-05 14:17:16 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-05 14:19:40 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 10:59:25 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:04:05 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:08:45 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:08:55 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:09:23 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:10:51 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:12:06 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-25 11:14:23 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:05:17 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:08:01 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:10:05 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:14:11 [ERROR] celery.backends.redis: Connection to Redis lost: Retry (0/20) now.
2024-07-31 21:16:12 [ERROR] celery.backends.redis: Connection to Redis lost: Retry (1/20) in 1.00 second.
2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:19:07 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:21:44 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:25:28 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:25:54 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:25:54 [WARNING] celery.backends.redis: 
Setting ssl_cert_reqs=CERT_NONE when connecting to redis means that celery will not validate the identity of the redis broker when connecting. This leaves you vulnerable to man in the middle attacks.

2024-07-31 21:30:56 [WARNING] celery.backends.redis: 
Setting ssl_cert_reqs=CERT_NONE when connecting to redis means that celery will not validate the identity of the redis broker when connecting. This leaves you vulnerable to man in the middle attacks.

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-07-31 21:45:01 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-07-31 21:45:01 [WARNING] celery.backends.redis: 
Setting ssl_cert_reqs=CERT_NONE when connecting to redis means that celery will not validate the identity of the redis broker when connecting. This leaves you vulnerable to man in the middle attacks.

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-05 12:17:03 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-05 12:17:03 [WARNING] celery.backends.redis: 
Setting ssl_cert_reqs=CERT_NONE when connecting to redis means that celery will not validate the identity of the redis broker when connecting. This leaves you vulnerable to man in the middle attacks.

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-06 15:36:34 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-06 15:40:00 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-08 16:40:29 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-08 16:41:52 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-08 17:42:36 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-08 21:51:30 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-08 21:58:17 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def chunks(task, it, n):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def update_status_celery():
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def salvar_arquivos_cliente(id_cliente, rg_frente_b64=0, rg_verso_b64=1, cnh_b64=2):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def xmap(task, it):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def backend_cleanup():
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def chain(*args, **kwargs):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def xstarmap(task, it):
    return 1

2024-08-08 21:59:26 [DEBUG] celery.utils.functional: 
def accumulate(self, *args, **kwargs):
    return 1

